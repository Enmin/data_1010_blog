{
  
    
        "post0": {
            "title": "Application of SVD in image processing",
            "content": "Introduction to SVD . Matrix factorization is a very important part of linear algebra. By decomposing the original matrix into matrices of different properties, the matrix factorization can not only show the potential attributes of the original matrix, but also help to implement various algorithms efficiently. Among all kinds of matrix factorizations, SVD (Singular Value Decomposition) is one of the most common used factorizaitons. SVD decomposes an aribitrary matrix into two orthogonal matrices and one diagonal matrix, with each of them has a specific mathematical meaning. We will elaborate on this process in the following section. . Definition of Singular Value: Define $A in C_r^{(m times n)}$, $A^HA$ has eigenvalues $$ lambda_1 geq lambda_2 geq cdots geq lambda_r geq lambda_{r+1} = lambda_n = 0$$ Then we say $ sigma_i = sqrt{ lambda_i} (i=1,2, cdots,r)$ are singular values of the matrix $A$ . Assume that $A in C_r^{(m times n)}$, there exists matrix of rank m $U$ and matrix of rank n $v$ such that $$ A = U Sigma V^H$$ $ Sigma$ is the diagonal matrix of $A$&#39;s singular values. $U$&#39;s column are $A$&#39;s left singular vectors and $V$&#39;s columns are $A$&#39;s right singular vectors. . Proof of SVD . Define $A in C_r^{(m times n)}$, $$V_1 = (v_1 v_2 cdots v_r)$$ is a set of normalized orthogonal vectors corresponding to $A^HA$&#39;s $r$ eigenvalues $ sigma_i^2$, which satisfies $$A^HAv_i = sigma_i^2 v_i (i=1,2, cdots,r)$$ left multiplies $v_i^H$, $$v_i^HA^HAv_i = ||Av_i||^2 = sigma_i^2$$ using square root on both sides, we get $||Av_i|| = sigma_i$ And $$Y_1=(y_1,y)2, cdots,y_r)=AV_1=(Av_1,Av_2, cdots,Av_r)$$ $$Y_1^HY_1 = V_1^HA^HAV_1 = left( begin{matrix} sigma_1^2 &amp;&amp; 0 &amp; ddots&amp; 0 &amp;&amp; sigma_r^2 end{matrix} right) = D$$ Hence, $y_i(i=1,2, cdots,r)$ is a set of orthogonal vectors and they have lengths $ sqrt( sigma_i^2) = sigma_i$. We can the calculate the unit vectors $$U_1 = Y_1D^{-1}$$ and $$AV_1 = U_1D$$ Now, we only need to combine $U_1$ and $AA^H$&#39;s eigenvectors of trivial eigenvalues to form a orthogonal matrix $$U = (U_1 space space U_2)$$ And expand $V_1$ to orthogonal matrix $$V = (V_1 space space V_2)$$ And then set $$ Sigma = left( begin{matrix} D &amp; 0 0 &amp; O end{matrix} right)$$ Finally,$$AV = U Sigma$$ $$A = U Sigma V^H$$ . Meaning of SVD . For any matrix $A in C_r^{(m times n)}$, it has 4 vector space: . (Row space):vector space formed by all row vectors 2. (Column space): vector space formed by all column vectors (Range) | (Null space): vector space formed by vectors that satisfy $Ax=0$ | (Left null space): vector space formed by vectors that satisfy $A^Hx=0$ | From fundamental theorem of linear algebra, This four vector space have the following relationships: . the dimension of row space and vectors space are $r$ the dimension of null space is $n - r$ the left null space has dimension $m-r$ the row space and null space are orthogonal complement the column space and left null space are orthogonal complement . The SVD relates 4 vector space elegantly. First of all, $A$ and $A^HA$ have the same null space, because $A^HA$&#39;s null space and eigen space formed by its zero eigenvalues are the same. Therefore, the $r+1th$ and $nth$ column of $V$ constitutes a set of unit orthogonal basis of the null space of $A$. In terms of the orthogonality of $V$, the first to $rth$ columns of V forms a orthogonal complement vector space to the vector space of $r+1th$ to $nth$ columns of itself. By the uniqueness of orthogonal complement property and fundamental theorem of linear algebra, the first to $r$th columns of $V$ constitute a unit orthogonal basis of $A$&#39;s row space. In the same sense, the first to the $rth$ columns of $U$ form a vector space that is a unit orthogonal basis of $A$&#39;s column space; the $r+1th$ to $mth$ columns of U forms a unit orthogonal basis of the left null space of A. What&#39;s more, according to SVD theorem, the first $rth$ columns of $U$ and those of $V$ (assume as $U_1$ and $V_1$) has the following relathionship: $$AV_1 = DU_1 (D = diag( sigma_1, sigma_2, cdots, sigma_r))$$ Hence, SVD not only generates 4 unit orthogonal bases of 4 vectors space of the original matrix, but also relates its row space and column space through a simple linear transformation. . SVD in Image Processing . SVD has important usages in matrix calculations, text mining and many other fields. I will go through its usage in image processing, especially in the compression of images and the representation of image features . SVD and Compression of Images. . Digital images could be considered as a 2-dimension matrix in which every entry represents the grayness of a pixel in the image. With the development of the related technologies, modern digital cameras are able to photograph a picture of millions of pixels. As a result, the matrix of the image has a relative large size, even huge. But due to the large portion of areas that have similar colors, which means the pixels are highly correlated in those areas, the image as certain certain level of redundancy of information in its corresponding matrix. Such redundancy can be measured by the rank of the matrix: A high rank matrix as lower correlation between columns and a low rank matrix has higher correlation bewteen columns. The picture below is transformed from a vector $u = [0, 0.1, 0.2, cdots, 0.9]$ right multiplies a vector $v^H$ with 10 entries all equal to 1. The matrix of the image is $$ left( begin{matrix} 0 &amp; 0 &amp; cdots &amp; 0 0.1 &amp; 0.1 &amp; cdots &amp; 0.1 0.2 &amp; 0.2 &amp; cdots &amp; 0.2 vdots &amp; vdots &amp;&amp; vdots 0.9 &amp; 0.9 &amp; cdots &amp; 0.9 end{matrix} right)$$ Apparently, the rank of this matrix is 1 because every row of it can be achieved by another row multiplying a number. Hence, We just need $u,v$ vectors with 20 numbers to store all the information of this matrix. The 80 left entries are redundant in this case. The compression ratio is $$CR = frac{20}{100} = 0.2$$ Of course, this is an extreme case; the more general problem is like this: for a matrix for an image, how do we acquire the best similar matrix of a low rank? SVD gives an answer to this question. We can write SVD in the form of outer product expansion: $$A = U Sigma V^H = (u_1,u_2, cdots,u_m) left( begin{matrix} sigma_1 &amp;&amp;&amp; o &amp; ddots&amp;&amp; &amp;&amp; sigma_r&amp; o &amp;&amp;&amp; o end{matrix} right) left( begin{matrix} v_1^H v_2^H vdots v_n^H end{matrix} right) = sum_{i=1}^r sigma_i u_i v_i^H$$ After we write the product in sum, SVD is only left with $r$ nonzero singular values and corresponding outer products with $u_i, v_i$. The rest of the outer products are redundant data, which contribute nothing to the construction of A. We can easily discover that, there is a nonzero eigenvalue of the above matrix. Naturally, we can perform SVD on any image, remove those vectors of its zero singular values and get a similar matrix with a lower rank. However, because of the existence of noise and the complexity of the image content, images in reality are always full rank. In other words, the number of nonzero singular values equal the number of columns or rows. Simply removing redundant singular vectors does not help in compression. Though highly correlated areas in images are linearly indepedent in definition rigorously, they can be seen as approximately linear dependent. This truth would cause the existence of extremely small singular values because the linear independence caused by the small differences between pixels does not matter in the whole image. Therefore, we can remove the small $ sigma_i$ in the outer product expansion formula to get a rank of $r-k$ matrix. This matrix is viewed as the low rak approximation. Here comes the question: how do we know that it is a good approximation? . Define $A in C_r^{(m times n)}$, the optimization problem $$O = min||A-A_1||_F space s.t. space rank(A_1) = 1$$ takes its minimum when $A= sigma_1 u_1 v_1^H$, and $ sigma_1$ is the biggest singular value of $A$, while $u_1,v_1$ are its left and right singular vectors. $|| cdot||_F$ is the Frobenius norm. . --Simple Proof-- . We can take the SVD of $A$ as $U Sigma V^H$ and take it into the object funciton: $$||A - A_1||_F = ||U Sigma V^H - A_1||_F$$ Due to Forbenius norm&#39;s unitary invariance, we get $$ ||U Sigma V^H - A_1||_F = || Sigma - U^HA_1V||_F$$ As $A_1$ has rank 1, $U^HA_1V$ can be represented as $ alpha xy^H$, of which $x,y$ are the unit vectors in $C^M,C^N$. Hence, $$||U Sigma V^H - A_1||_F = || Sigma- alpha xy^H||_F$$ With $||X||_F^2 = tr(X^HX)$, and $tr(XY) = tr(YX)$, we turn the problem into solving for the trace of the matrix instead of the Forbenius norm. $$|| Sigma - alpha xy^H||_F^2$$ $$=tr[( Sigma- alpha xy^H)^H( Sigma - alpha xy^H)]$$ $$=tr( Sigma^H Sigma - Sigma^H- alpha xy^H - alpha xy^H Sigma + alpha^Hyy^H)$$ $$=tr( Sigma^H Sigma + alpha^2 - 2 alpha tr[ Sigma^H Re(xy^H)])$$ $$=|| Sigma||_F^2 + alpha^2 - 2 alpha sum_{i=1}^r sigma_iRe(x_iy_i^*)$$ And we have $$ sum_{i=1}^r sigma_iRe(x_iy_i^*) leq sum_{i=1}^r sigma_i|x_iy_i^*| leq sum_{i=1}^r sigma_i|x_i||y_i^*| leq sigma_1 sum_{i=1}^r|x_i||y_i^*|= sigma_1( tilde{x}, tilde{y})$$ while $ tilde{x} = (|x_1|,|x_2|, cdots,|x_r|), tilde{y}=(|y_1|,|y_2|, cdots,|y_r|$, and $( cdot, cdot)$ is the inner product of vectors. According to Cauchy-Schwartz inequality, we have $$ sigma_1( tilde{x}, tilde{y}) leq sigma_1| tilde{X}|| tilde{y}| leq sigma|x||y| = sigma_1$$. Above all, the lower bound of $||A-A_1||_F^2$ = $$ Sigma^H Sigma + alpha^2 - 2 alpha tr[ Sigma^H Re(x_iy_i^*)]$$ $$ geq || Sigma||_F^2 + alpha^2 - 2 alpha sigma_1$$ $$=|| Sigma||_F^2 + ( alpha- sigma_1)^2 - sigma_1^2$$ When $ alpha = sigma_1$, this lower bound gets its minimum $|| Sigma||_F^2 - sigma_1^2$. By the way, $x,y$ is equal to $e_1 = (1,0, cdots,0)^T$. Now we have $$A_1 = alpha Uxy^HV^H= alpha u_1v_1^H$$ . --Done-- . In application, we can get a k-rank approximation of $A$ by an iterative 1-rank approximation greedy algorithm: . 1) get the best 1-rank approximation of matrix $A$ as $A_1$ 2) get the difference matrix $E_1 = A - A_1$ 3) get the best 1-rank approximation of $E_1$ as $A_2$ 4) get the difference matrix $E_2 = E_1 - A_2$ 5) iteratively approach the k times approximation till getting the result $ hat{A} = sum_{i=1}^n A_i$ . Lawson and Hanson proved that this algorithm will return a best k-rank approximation, which is the sum of the first $kth$ outer products of SVD. Because $E_1 = A - sigma_1 u_1 v_1^H = sum_{i=1}^r sigma_k u_k v_k^H$, the second iteration will return a 1-rank approximation of A_2 as $ sigma_2 u_2 v_2^H$, and kth iteration as $A_k = sigma_k u_k v_k^H$, finally $$ hat{A} = sum_{i=1}^K sigma_k u_k v_k^H $$ Above all, the first $kth$ outer products of SVD outer product expansion is its best k-rank approximation. . Example . . import numpy as np import pandas as pd import matplotlib.pyplot as plt import cv2 img = cv2.imread(&#39;beach.jpg&#39;, 0) # obtain svd U, S, V = np.linalg.svd(img) print(U.shape, S.shape, V.shape) comps = [638, 500, 400, 300, 200, 100] plt.figure(figsize = (16, 8)) for i in range(6): low_rank = U[:, :comps[i]] @ np.diag(S[:comps[i]]) @ V[:comps[i], :] if(i == 0): plt.subplot(2, 3, i+1), plt.imshow(low_rank, cmap = &#39;gray&#39;), plt.axis(&#39;off&#39;), plt.title(&quot;Original Image with n_components =&quot; + str(comps[i])) else: plt.subplot(2, 3, i+1), plt.imshow(low_rank, cmap = &#39;gray&#39;), plt.axis(&#39;off&#39;), plt.title(&quot;n_components =&quot; + str(comps[i])) plt.savefig(&#39;beach-svd.jpg&#39;) . . With the rank decreased, the compressed images are getting more vague but still keep the most information we need to recognize the &#39;beach&#39; content. . SVD and Image representation . SVD has its more imporatant roles in image representation, which means picking basis vectors for images so that images can show various useful features. For example, Discrete Fourier Transform is one of the common image representation methods. SVD is also a powerful image representation method, which is also called Principle Componenet Analysis - PCA. . Suppose that we have 10 2-dimension data as following: . . using Plots a = [(-0.01,0.3), (0.3,-0.28), (-1.32,-1.43), (-0.42,-0.57), (0,0.6), (1.08,0.42), (2.42,1.99), (1.12,0.03), (0.05,0.63), (1.47,1.74)] xs = [i[1] for i in a] ys = [i[2] for i in a] gr() plot(xs, ys, seriestype = :scatter) . From the plot, we can see that these points center around a line that passes the origin. If x and y mean two physics measurement at the same time, then we might believe these two variables have linear relationship. The problem is, how should we calculate this line? More generally, how to find directions of the trend of changes of a set of n-dimension data with mean zero? . First of all, assume the sample $X in R^{m times n}$, its $i(1,2, cdots,n)th$ column $x_i$ represents the $ith$ m-dimension sample. In total, there are n samples with mean zero: $$X = (x_1,x_2, cdots,x_n), x_i in R^m$$ $$ sum_{i=1}^n x_i = 0$$ Projecting these n samples onto some unit vector $u$, if the directions of $u$ matches the direction of the most violent change, then the projected samples have length along the the direction of $u$, $|u^TX|^2$, the maximum of all times. Hence, we have the following optimization problem: $$O = max(uXX^Tu) space s.t. space u^tu = 1$$ Since $XX^T$ is a symmetric matrix, we can do diagonalization: $XX^T = Q^T Lambda Q$. $$u^TXX^Tu=u^TQ^T Lambda Qu = y^T Lambda y$$ with $y^Ty=1$ as orthogonal linear transformations preserve the inner product. Expanding the above equation, we have $$y^T Lambda y = sum_{i=1}^n y_i^2 lambda_i leq lambda_1 sum_{i=1}^n y_i^2 = lambda_1$$ . $ lambda_1$ is the largest eigenvalue of $XX^T$ (Assume $ Lambda=diag( lambda_1, lambda_2, cdots, lambda_n)$ has its eigenvalues in the diagonal in descending order), when $y=(1,0,0, cdots,0)$. Now $u$ is the first column of the eigenvector matrix $Q$, which is the eigenvector of $ lambda_1$. The above property is the condition of Rayleigh-Ritz theorem in $R$. In other words, when $u$ is left singular vector of the largest singular value of the matrix $X$, the sample data has its biggest sum of squares of projections on the direction of $u$, which is the square of the largest singular value. Similarly, if we want to find the $k(k=1,2, cdots,n)$ number of the most violent change of sample data, according to Rayleigh-Ritz theorem, we should find the k number of left singular vectors of the matrix $X$. . Since those k number of orthogonal vectors show the major trend of the data well, they can be a set of image representation basis, which is also called the Principle Component of the sample data. Suppose $k=rank(X)$, we can use SVD to show the principle component ($u_1,u_2, cdots,u_k$) of data $x_j$: $$X = (u_1,u_2, cdots,u_k) Sigma V^T = (u_1,u_2, cdots,u_k)C$$ $$ Leftarrow Rightarrow (x_1,x_2, cdots,x_k) = (u_1,u_2, cdots,u_k) left( begin{matrix} c_{11} &amp; cdots&amp; c_{1n} vdots &amp; ddots&amp; vdots c_{n1} &amp; cdots&amp; c_{nn} end{matrix} right)$$ $$ Leftarrow Rightarrow x_j = sum_{i=1}^k u_ic_{ij} (j=1,2, cdots,n)$$ In the real world, the principle component number $k$ is always smaller than the original dimension of data $X$, so we acquire a more tight image reprensentaion through SVD. In the chart above, we can get the first principle component is $u_1=(-0.74, -0.67)^T$ with singular value 4.63. And the projected sample data vector length has square root 1.38. . In image processing, especially the face recognition, sample matrix $X$ has each of its column as a column of image. Suppose the image is of size (256 $ times$ 256) pixels, the dimension of this image is 65536. As the increase of sample data, such a high dimension posts a big challenge to data storage and the computing resources. However, comparing to the high dimension of images, the total number of images is much smaller. Assume that a face recognition system has 50 users and each user has 10 sample images, we will have 500 images in database. The sample matrix of these data is very narrow, which is $X in R^{65536 times 500}$. Based on the property of singular value decomposition, this matrix has at most 500 non-zero singular values, meaning that only 500 principle components have change of directions larger than zero while in other directions, all samples remain undeviated. . Therefore, we can assume all 50 users are distributed in a relatively lower dimension of vector space. This space is consists of a basis of 500 principle components. After we read a image, we can project it onto this low dimension space and use a certain algorithm to recognize it. . Surprisingly, if we recover these principle components back to an image, these images resemble the basic information and attributes of a human face. Hence, these faces are called &quot;Eigenface.&quot; . Conclusion . SVD has its important status in preprocessing images and extracting features. Today, I only show its function in image compression and image representation, but we can still see its powerful usage. The mathematics has shown SVD&#39;s feasibility and correctness in different ways. I will share more about its usage in machine learning. . Reference . Lawson, C.L. and R.J. Hanson, Solving least squares problems. Vol. 15. 1995: SIAM. |",
            "url": "https://enmin.github.io/data_1010_blog/2020/11/20/blog.html",
            "relUrl": "/2020/11/20/blog.html",
            "date": " • Nov 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master- badges: true- comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://enmin.github.io/data_1010_blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://enmin.github.io/data_1010_blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://enmin.github.io/data_1010_blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://enmin.github.io/data_1010_blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}